name: CI

on:
  pull_request:

jobs:
  test-build-push:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install pytest + flake8
        run: pip install pytest flake8

      - name: Run tests
        run: |
          pytest -q lambdas/scanner
          pytest -q lambdas/action
          pytest -q lambdas/ai_insights

      - name: Lint
        run: |
          flake8 lambdas/scanner lambdas/action lambdas/ai_insights || true

      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Terraform (for ECR repos creation)
        run: |
          sudo apt-get update && sudo apt-get install -y unzip
          curl -Ls https://releases.hashicorp.com/terraform/1.7.5/terraform_1.7.5_linux_amd64.zip -o tf.zip
          sudo unzip -o tf.zip -d /usr/local/bin
          rm tf.zip

      - name: Terraform (create only ECR repos, idempotent)
        working-directory: terraform
        run: |
          if [ ! -f terraform.tfvars ]; then cp terraform.tfvars.example terraform.tfvars; fi
          terraform init
          terraform apply -auto-approve \
            -target=aws_ecr_repository.scanner \
            -target=aws_ecr_repository.action \
            -target=aws_ecr_repository.ai

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push images (tag = PR SHA)
        run: |
          SHA="${{ github.sha }}"
          for svc in scanner action ai_insights; do
            REPO_SUFFIX="${svc%_*}"
            REPO="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/levelup-costops-${REPO_SUFFIX}"
            docker build -t "$REPO:$SHA" "lambdas/$svc"
            docker push "$REPO:$SHA"
          done
